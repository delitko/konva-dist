import { EventEmitter, AfterContentInit, QueryList, OnDestroy } from '@angular/core';
import { CoreShapeComponent as CoreShape } from './core-shape.component';
import { KonvaComponent } from '../interfaces/ko-component.interface';
import { Stage } from 'konva/lib/Stage';
import { ContainerConfig } from 'konva/lib/Container';
import { NgKonvaEventObject } from '../interfaces/ngKonvaEventObject';
import * as i0 from "@angular/core";
export declare class StageComponent implements KonvaComponent, AfterContentInit, OnDestroy {
    private nodeContainer;
    shapes: QueryList<CoreShape>;
    set config(config: ContainerConfig);
    mouseover: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    mousemove: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    mouseout: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    mouseenter: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    mouseleave: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    mousedown: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    mouseup: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    wheel: EventEmitter<NgKonvaEventObject<WheelEvent>>;
    contextmenu: EventEmitter<NgKonvaEventObject<PointerEvent>>;
    click: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    dblclick: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    touchstart: EventEmitter<NgKonvaEventObject<TouchEvent>>;
    touchmove: EventEmitter<NgKonvaEventObject<TouchEvent>>;
    touchend: EventEmitter<NgKonvaEventObject<TouchEvent>>;
    tap: EventEmitter<NgKonvaEventObject<TouchEvent>>;
    dbltap: EventEmitter<NgKonvaEventObject<TouchEvent>>;
    dragstart: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    dragmove: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    dragend: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    private _stage;
    private _config;
    private cacheProps;
    getStage(): Stage;
    getConfig(): ContainerConfig;
    private uploadKonva;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<StageComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<StageComponent, "ko-stage", never, { "config": { "alias": "config"; "required": false; }; }, { "mouseover": "mouseover"; "mousemove": "mousemove"; "mouseout": "mouseout"; "mouseenter": "mouseenter"; "mouseleave": "mouseleave"; "mousedown": "mousedown"; "mouseup": "mouseup"; "wheel": "wheel"; "contextmenu": "contextmenu"; "click": "click"; "dblclick": "dblclick"; "touchstart": "touchstart"; "touchmove": "touchmove"; "touchend": "touchend"; "tap": "tap"; "dbltap": "dbltap"; "dragstart": "dragstart"; "dragmove": "dragmove"; "dragend": "dragend"; }, ["shapes"], ["*"], true, never>;
}
