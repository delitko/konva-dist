import updatePicture from './updatePicture.mjs';
import applyNodeProps from './applyNodeProps.mjs';
function camelize(str) {
    return str
        .replace(/^\w|[A-Z]|\b\w/g, function (letter, index) {
        return index == 0 ? letter.toLowerCase() : letter.toUpperCase();
    })
        .replace(/\s+/g, '');
}
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
export function getName(componentTag) {
    return capitalizeFirstLetter(camelize(componentTag.slice(3).replace('-', ' ')));
}
export function createListener(instance) {
    const output = {};
    [
        'mouseover',
        'mousemove',
        'mouseout',
        'mouseenter',
        'mouseleave',
        'mousedown',
        'mouseup',
        'wheel',
        'contextmenu',
        'click',
        'dblclick',
        'touchstart',
        'touchmove',
        'touchend',
        'tap',
        'dbltap',
        'dragstart',
        'dragmove',
        'dragend',
    ].forEach((eventName) => {
        const name = eventName;
        const eventEmitter = (instance[name]);
        if (eventEmitter.observed) {
            output['on' + eventName] = eventEmitter.emit.bind(eventEmitter);
        }
    });
    return output;
}
export { updatePicture, applyNodeProps };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZzIta29udmEvc3JjL2xpYi91dGlscy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGFBQWEsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLGNBQWMsTUFBTSxrQkFBa0IsQ0FBQztBQUs5QyxTQUFTLFFBQVEsQ0FBQyxHQUFXO0lBQzNCLE9BQU8sR0FBRztTQUNQLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLE1BQU0sRUFBRSxLQUFLO1FBQ2pELE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbEUsQ0FBQyxDQUFDO1NBQ0QsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN6QixDQUFDO0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxNQUFjO0lBQzNDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUFDLFlBQW9CO0lBQzFDLE9BQU8scUJBQXFCLENBQzFCLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FDbEQsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLFFBQXdCO0lBQ3JELE1BQU0sTUFBTSxHQUFtQixFQUFFLENBQUM7SUFDbEM7UUFDRSxXQUFXO1FBQ1gsV0FBVztRQUNYLFVBQVU7UUFDVixZQUFZO1FBQ1osWUFBWTtRQUNaLFdBQVc7UUFDWCxTQUFTO1FBQ1QsT0FBTztRQUNQLGFBQWE7UUFDYixPQUFPO1FBQ1AsVUFBVTtRQUNWLFlBQVk7UUFDWixXQUFXO1FBQ1gsVUFBVTtRQUNWLEtBQUs7UUFDTCxRQUFRO1FBQ1IsV0FBVztRQUNYLFVBQVU7UUFDVixTQUFTO0tBQ1YsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtRQUN0QixNQUFNLElBQUksR0FBK0MsU0FBUyxDQUFDO1FBRW5FLE1BQU0sWUFBWSxHQUFpRCxDQUNqRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQ2YsQ0FBQztRQUNGLElBQUksWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbEUsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVELE9BQU8sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXBkYXRlUGljdHVyZSBmcm9tICcuL3VwZGF0ZVBpY3R1cmUnO1xyXG5pbXBvcnQgYXBwbHlOb2RlUHJvcHMgZnJvbSAnLi9hcHBseU5vZGVQcm9wcyc7XHJcbmltcG9ydCB7IEtvbnZhQ29tcG9uZW50IH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9rby1jb21wb25lbnQuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IExpc3RlbmVyUmVjb3JkIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIHN0clxyXG4gICAgLnJlcGxhY2UoL15cXHd8W0EtWl18XFxiXFx3L2csIGZ1bmN0aW9uIChsZXR0ZXIsIGluZGV4KSB7XHJcbiAgICAgIHJldHVybiBpbmRleCA9PSAwID8gbGV0dGVyLnRvTG93ZXJDYXNlKCkgOiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcclxuICAgIH0pXHJcbiAgICAucmVwbGFjZSgvXFxzKy9nLCAnJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlcihzdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWUoY29tcG9uZW50VGFnOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoXHJcbiAgICBjYW1lbGl6ZShjb21wb25lbnRUYWcuc2xpY2UoMykucmVwbGFjZSgnLScsICcgJykpXHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyKGluc3RhbmNlOiBLb252YUNvbXBvbmVudCk6IExpc3RlbmVyUmVjb3JkIHtcclxuICBjb25zdCBvdXRwdXQ6IExpc3RlbmVyUmVjb3JkID0ge307XHJcbiAgW1xyXG4gICAgJ21vdXNlb3ZlcicsXHJcbiAgICAnbW91c2Vtb3ZlJyxcclxuICAgICdtb3VzZW91dCcsXHJcbiAgICAnbW91c2VlbnRlcicsXHJcbiAgICAnbW91c2VsZWF2ZScsXHJcbiAgICAnbW91c2Vkb3duJyxcclxuICAgICdtb3VzZXVwJyxcclxuICAgICd3aGVlbCcsXHJcbiAgICAnY29udGV4dG1lbnUnLFxyXG4gICAgJ2NsaWNrJyxcclxuICAgICdkYmxjbGljaycsXHJcbiAgICAndG91Y2hzdGFydCcsXHJcbiAgICAndG91Y2htb3ZlJyxcclxuICAgICd0b3VjaGVuZCcsXHJcbiAgICAndGFwJyxcclxuICAgICdkYmx0YXAnLFxyXG4gICAgJ2RyYWdzdGFydCcsXHJcbiAgICAnZHJhZ21vdmUnLFxyXG4gICAgJ2RyYWdlbmQnLFxyXG4gIF0uZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XHJcbiAgICBjb25zdCBuYW1lOiBrZXlvZiBLb252YUNvbXBvbmVudCA9IDxrZXlvZiBLb252YUNvbXBvbmVudD5ldmVudE5hbWU7XHJcblxyXG4gICAgY29uc3QgZXZlbnRFbWl0dGVyOiBFdmVudEVtaXR0ZXI8dW5rbm93bj4gPSA8RXZlbnRFbWl0dGVyPHVua25vd24+PihcclxuICAgICAgaW5zdGFuY2VbbmFtZV1cclxuICAgICk7XHJcbiAgICBpZiAoZXZlbnRFbWl0dGVyLm9ic2VydmVkKSB7XHJcbiAgICAgIG91dHB1dFsnb24nICsgZXZlbnROYW1lXSA9IGV2ZW50RW1pdHRlci5lbWl0LmJpbmQoZXZlbnRFbWl0dGVyKTtcclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gb3V0cHV0O1xyXG59XHJcblxyXG5leHBvcnQgeyB1cGRhdGVQaWN0dXJlLCBhcHBseU5vZGVQcm9wcyB9O1xyXG4iXX0=