// adapted FROM: https://github.com/lavrton/react-konva/blob/master/src/react-konva-fiber.js
import updatePicture from './updatePicture.mjs';
export default function applyNodeProps(component, props = {}, oldProps = {}) {
    if ('id' in props) {
        const message = `ng2-konva: You are using "id" attribute for Konva node. In some very rare cases it may produce bugs. Currently we recommend not to use it and use "name" attribute instead.`;
        console.warn(message);
    }
    const instance = component.getStage();
    const updatedProps = {};
    let hasUpdates = false;
    Object.keys(oldProps).forEach((key) => {
        const isEvent = key.slice(0, 2) === 'on';
        const propChanged = oldProps[key] !== props[key];
        if (isEvent && propChanged) {
            let eventName = key.slice(2).toLowerCase();
            if (eventName.slice(0, 7) === 'content') {
                eventName =
                    'content' + eventName.slice(7, 8).toUpperCase() + eventName.slice(8);
            }
            instance.off(eventName, oldProps[key]);
        }
        const toRemove = !Object.hasOwn(props, key);
        if (toRemove) {
            instance.setAttr(key, undefined);
        }
    });
    Object.keys(props).forEach((key) => {
        const isEvent = key.slice(0, 2) === 'on';
        const toAdd = oldProps[key] !== props[key];
        if (isEvent && toAdd) {
            let eventName = key.slice(2).toLowerCase();
            if (eventName.slice(0, 7) === 'content') {
                eventName =
                    'content' + eventName.slice(7, 8).toUpperCase() + eventName.slice(8);
            }
            if (props[key]) {
                instance.off(eventName);
                instance.on(eventName, (event) => {
                    props[key]({
                        angularComponent: component,
                        event,
                    });
                });
            }
        }
        if (!isEvent &&
            (props[key] !== oldProps[key] || props[key] !== instance.getAttr(key))) {
            hasUpdates = true;
            updatedProps[key] = props[key];
        }
    });
    if (hasUpdates) {
        instance.setAttrs(updatedProps);
        updatePicture(instance);
        let val;
        Object.keys(updatedProps).forEach((prop) => {
            val = updatedProps[prop];
            if (val instanceof Image && !val.complete) {
                const node = instance;
                val.addEventListener('load', function () {
                    const layer = node.getLayer();
                    if (layer) {
                        layer.batchDraw();
                    }
                });
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbHlOb2RlUHJvcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZzIta29udmEvc3JjL2xpYi91dGlscy9hcHBseU5vZGVQcm9wcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0RkFBNEY7QUFFNUYsT0FBTyxhQUFhLE1BQU0saUJBQWlCLENBQUM7QUFNNUMsTUFBTSxDQUFDLE9BQU8sVUFBVSxjQUFjLENBQ3BDLFNBQXlCLEVBQ3pCLFFBQW1CLEVBQUUsRUFDckIsV0FBc0IsRUFBRTtJQUV4QixJQUFJLElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNsQixNQUFNLE9BQU8sR0FBRyw2S0FBNkssQ0FBQztRQUM5TCxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdEMsTUFBTSxZQUFZLEdBQWMsRUFBRSxDQUFDO0lBQ25DLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUV2QixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ3BDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQztRQUN6QyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELElBQUksT0FBTyxJQUFJLFdBQVcsRUFBRSxDQUFDO1lBQzNCLElBQUksU0FBUyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDM0MsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUUs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QUFNLEVBQUU7b0JBQzNCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFDOUIsSUFBSSxLQUFLLEVBQUUsQ0FBQzt3QkFDVixLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7b0JBQ3BCLENBQUM7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGFkYXB0ZWQgRlJPTTogaHR0cHM6Ly9naXRodWIuY29tL2xhdnJ0b24vcmVhY3Qta29udmEvYmxvYi9tYXN0ZXIvc3JjL3JlYWN0LWtvbnZhLWZpYmVyLmpzXHJcblxyXG5pbXBvcnQgdXBkYXRlUGljdHVyZSBmcm9tICcuL3VwZGF0ZVBpY3R1cmUnO1xyXG5pbXBvcnQgeyBLb252YUNvbXBvbmVudCB9IGZyb20gJy4uL2ludGVyZmFjZXMva28tY29tcG9uZW50LmludGVyZmFjZSc7XHJcbmltcG9ydCB7IEtvbnZhRXZlbnRPYmplY3QgfSBmcm9tICdrb252YS9saWIvTm9kZSc7XHJcbmltcG9ydCB7IE5nS29udmFFdmVudE9iamVjdCB9IGZyb20gJy4uL2ludGVyZmFjZXMvbmdLb252YUV2ZW50T2JqZWN0JztcclxuaW1wb3J0IHsgUHJvcHNUeXBlIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBseU5vZGVQcm9wcyhcclxuICBjb21wb25lbnQ6IEtvbnZhQ29tcG9uZW50LFxyXG4gIHByb3BzOiBQcm9wc1R5cGUgPSB7fSxcclxuICBvbGRQcm9wczogUHJvcHNUeXBlID0ge31cclxuKTogdm9pZCB7XHJcbiAgaWYgKCdpZCcgaW4gcHJvcHMpIHtcclxuICAgIGNvbnN0IG1lc3NhZ2UgPSBgbmcyLWtvbnZhOiBZb3UgYXJlIHVzaW5nIFwiaWRcIiBhdHRyaWJ1dGUgZm9yIEtvbnZhIG5vZGUuIEluIHNvbWUgdmVyeSByYXJlIGNhc2VzIGl0IG1heSBwcm9kdWNlIGJ1Z3MuIEN1cnJlbnRseSB3ZSByZWNvbW1lbmQgbm90IHRvIHVzZSBpdCBhbmQgdXNlIFwibmFtZVwiIGF0dHJpYnV0ZSBpbnN0ZWFkLmA7XHJcbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBpbnN0YW5jZSA9IGNvbXBvbmVudC5nZXRTdGFnZSgpO1xyXG4gIGNvbnN0IHVwZGF0ZWRQcm9wczogUHJvcHNUeXBlID0ge307XHJcbiAgbGV0IGhhc1VwZGF0ZXMgPSBmYWxzZTtcclxuXHJcbiAgT2JqZWN0LmtleXMob2xkUHJvcHMpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgY29uc3QgaXNFdmVudCA9IGtleS5zbGljZSgwLCAyKSA9PT0gJ29uJztcclxuICAgIGNvbnN0IHByb3BDaGFuZ2VkID0gb2xkUHJvcHNba2V5XSAhPT0gcHJvcHNba2V5XTtcclxuICAgIGlmIChpc0V2ZW50ICYmIHByb3BDaGFuZ2VkKSB7XHJcbiAgICAgIGxldCBldmVudE5hbWUgPSBrZXkuc2xpY2UoMikudG9Mb3dlckNhc2UoKTtcclxuICAgICAgaWYgKGV2ZW50TmFtZS5zbGljZSgwLCA3KSA9PT0gJ2NvbnRlbnQnKSB7XHJcbiAgICAgICAgZXZlbnROYW1lID1cclxuICAgICAgICAgICdjb250ZW50JyArIGV2ZW50TmFtZS5zbGljZSg3LCA4KS50b1VwcGVyQ2FzZSgpICsgZXZlbnROYW1lLnNsaWNlKDgpO1xyXG4gICAgICB9XHJcbiAgICAgIGluc3RhbmNlLm9mZihldmVudE5hbWUsIG9sZFByb3BzW2tleV0pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdG9SZW1vdmUgPSAhT2JqZWN0Lmhhc093bihwcm9wcywga2V5KTtcclxuICAgIGlmICh0b1JlbW92ZSkge1xyXG4gICAgICBpbnN0YW5jZS5zZXRBdHRyKGtleSwgdW5kZWZpbmVkKTtcclxuICAgIH1cclxuICB9KTtcclxuICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICBjb25zdCBpc0V2ZW50ID0ga2V5LnNsaWNlKDAsIDIpID09PSAnb24nO1xyXG4gICAgY29uc3QgdG9BZGQgPSBvbGRQcm9wc1trZXldICE9PSBwcm9wc1trZXldO1xyXG4gICAgaWYgKGlzRXZlbnQgJiYgdG9BZGQpIHtcclxuICAgICAgbGV0IGV2ZW50TmFtZSA9IGtleS5zbGljZSgyKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICBpZiAoZXZlbnROYW1lLnNsaWNlKDAsIDcpID09PSAnY29udGVudCcpIHtcclxuICAgICAgICBldmVudE5hbWUgPVxyXG4gICAgICAgICAgJ2NvbnRlbnQnICsgZXZlbnROYW1lLnNsaWNlKDcsIDgpLnRvVXBwZXJDYXNlKCkgKyBldmVudE5hbWUuc2xpY2UoOCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHByb3BzW2tleV0pIHtcclxuICAgICAgICBpbnN0YW5jZS5vZmYoZXZlbnROYW1lKTtcclxuICAgICAgICBpbnN0YW5jZS5vbihldmVudE5hbWUsIChldmVudDogS29udmFFdmVudE9iamVjdDx1bmtub3duPikgPT4ge1xyXG4gICAgICAgICAgcHJvcHNba2V5XSh7XHJcbiAgICAgICAgICAgIGFuZ3VsYXJDb21wb25lbnQ6IGNvbXBvbmVudCxcclxuICAgICAgICAgICAgZXZlbnQsXHJcbiAgICAgICAgICB9IGFzIE5nS29udmFFdmVudE9iamVjdDx1bmtub3duPik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChcclxuICAgICAgIWlzRXZlbnQgJiZcclxuICAgICAgKHByb3BzW2tleV0gIT09IG9sZFByb3BzW2tleV0gfHwgcHJvcHNba2V5XSAhPT0gaW5zdGFuY2UuZ2V0QXR0cihrZXkpKVxyXG4gICAgKSB7XHJcbiAgICAgIGhhc1VwZGF0ZXMgPSB0cnVlO1xyXG4gICAgICB1cGRhdGVkUHJvcHNba2V5XSA9IHByb3BzW2tleV07XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGlmIChoYXNVcGRhdGVzKSB7XHJcbiAgICBpbnN0YW5jZS5zZXRBdHRycyh1cGRhdGVkUHJvcHMpO1xyXG4gICAgdXBkYXRlUGljdHVyZShpbnN0YW5jZSk7XHJcbiAgICBsZXQgdmFsO1xyXG4gICAgT2JqZWN0LmtleXModXBkYXRlZFByb3BzKS5mb3JFYWNoKChwcm9wKSA9PiB7XHJcbiAgICAgIHZhbCA9IHVwZGF0ZWRQcm9wc1twcm9wXTtcclxuICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIEltYWdlICYmICF2YWwuY29tcGxldGUpIHtcclxuICAgICAgICBjb25zdCBub2RlID0gaW5zdGFuY2U7XHJcbiAgICAgICAgdmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBjb25zdCBsYXllciA9IG5vZGUuZ2V0TGF5ZXIoKTtcclxuICAgICAgICAgIGlmIChsYXllcikge1xyXG4gICAgICAgICAgICBsYXllci5iYXRjaERyYXcoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==