import { EventEmitter, QueryList, OnDestroy, OnInit, AfterContentChecked } from '@angular/core';
import { KonvaComponent } from '../interfaces/ko-component.interface';
import { ShapeConfigTypes } from '../utils/configTypes';
import { ShapeTypes } from '../utils/shapeTypes';
import { Group } from 'konva/lib/Group';
import { Layer } from 'konva/lib/Layer';
import { Shape } from 'konva/lib/Shape';
import { Sprite } from 'konva/lib/shapes/Sprite';
import { Arc } from 'konva/lib/shapes/Arc';
import { Arrow } from 'konva/lib/shapes/Arrow';
import { Circle } from 'konva/lib/shapes/Circle';
import { Ellipse } from 'konva/lib/shapes/Ellipse';
import { Image } from 'konva/lib/shapes/Image';
import { Label, Tag } from 'konva/lib/shapes/Label';
import { Line } from 'konva/lib/shapes/Line';
import { Path } from 'konva/lib/shapes/Path';
import { Rect } from 'konva/lib/shapes/Rect';
import { RegularPolygon } from 'konva/lib/shapes/RegularPolygon';
import { Ring } from 'konva/lib/shapes/Ring';
import { Star } from 'konva/lib/shapes/Star';
import { Text } from 'konva/lib/shapes/Text';
import { TextPath } from 'konva/lib/shapes/TextPath';
import { Transformer } from 'konva/lib/shapes/Transformer';
import { Wedge } from 'konva/lib/shapes/Wedge';
import { FastLayer } from 'konva/lib/FastLayer';
import { NgKonvaEventObject } from '../interfaces/ngKonvaEventObject';
import * as i0 from "@angular/core";
export declare class CoreShapeComponent implements KonvaComponent, AfterContentChecked, OnDestroy, OnInit {
    shapes: QueryList<CoreShapeComponent>;
    set config(config: ShapeConfigTypes);
    get config(): ShapeConfigTypes;
    mouseover: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    mousemove: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    mouseout: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    mouseenter: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    mouseleave: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    mousedown: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    mouseup: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    wheel: EventEmitter<NgKonvaEventObject<WheelEvent>>;
    contextmenu: EventEmitter<NgKonvaEventObject<PointerEvent>>;
    click: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    dblclick: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    touchstart: EventEmitter<NgKonvaEventObject<TouchEvent>>;
    touchmove: EventEmitter<NgKonvaEventObject<TouchEvent>>;
    touchend: EventEmitter<NgKonvaEventObject<TouchEvent>>;
    tap: EventEmitter<NgKonvaEventObject<TouchEvent>>;
    dbltap: EventEmitter<NgKonvaEventObject<TouchEvent>>;
    dragstart: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    dragmove: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    dragend: EventEmitter<NgKonvaEventObject<MouseEvent>>;
    nameNode: keyof typeof ShapeTypes | 'Shape' | 'Sprite';
    private cacheProps;
    private _stage;
    protected _config: ShapeConfigTypes;
    getStage(): Shape | Arc | Arrow | Circle | Ellipse | Image | Label | Tag | Line | Path | Rect | RegularPolygon | Ring | Sprite | Star | Text | TextPath | Transformer | Wedge | Group | Layer | FastLayer;
    getConfig(): ShapeConfigTypes;
    ngOnInit(): void;
    private initKonva;
    protected uploadKonva(config: ShapeConfigTypes): void;
    ngAfterContentChecked(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CoreShapeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CoreShapeComponent, "ko-shape, ko-layer, ko-circle, ko-fastlayer, ko-group, ko-label, ko-rect, ko-ellipse, ko-wedge, ko-line, ko-sprite, ko-image, ko-text, ko-text-path, ko-star, ko-ring, ko-arc, ko-tag, ko-path, ko-regular-polygon, ko-arrow, ko-transformer", never, { "config": { "alias": "config"; "required": false; }; }, { "mouseover": "mouseover"; "mousemove": "mousemove"; "mouseout": "mouseout"; "mouseenter": "mouseenter"; "mouseleave": "mouseleave"; "mousedown": "mousedown"; "mouseup": "mouseup"; "wheel": "wheel"; "contextmenu": "contextmenu"; "click": "click"; "dblclick": "dblclick"; "touchstart": "touchstart"; "touchmove": "touchmove"; "touchend": "touchend"; "tap": "tap"; "dbltap": "dbltap"; "dragstart": "dragstart"; "dragmove": "dragmove"; "dragend": "dragend"; }, ["shapes"], ["*"], true, never>;
}
